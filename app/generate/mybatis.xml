<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- mysql 连接数据库jar -->
    <classPathEntry location="C:\Users\kiun_\.m2\repository\mysql\mysql-connector-java\8.0.30\mysql-connector-java-8.0.30.jar"/>

<!--    当数据库表内存在联合主键时，mybatis generator会默认生成两个实体类，一个只包含主键的实体类和一个包含其余字段的实体类，如果表里有BLOB字段，还会为所有BLOB字段生成单独的实体类，可以通过修改默认的defaultModelType属性更改生成方式，该属性支持三种生成方式：-->
<!--    1.conditional，默认是这种方式，当一张表只有一个主键时，不会为主键生成单独的实体类，超过一个则会生成单独的主键实体类，BLOB字段仍单独生成实体类。-->
<!--    2.hierarchical，只要表里有主键，就会生成单独的主键实体类，其余同上-->
<!--    3.flat，只为一张表生成一个实体类，包含所有字段-->
<!--    所以，当你不需要单独的主键实体类时，可以将defaultModelType更改为flat方式，-->
    <context id="ruoyi" defaultModelType="flat" targetRuntime="MyBatis3">

        <plugin type="com.kiun.mybatis.auto.generate.OverIsMergeablePlugin">
            <property name="withSetter" value="1"/>
            <property name="autoAddId" value="1"/>
            <property name="exampleBase" value="com.kiun.functionary.dao.BaseExample"/>
            <!--类注解 内置字段 ${remarks} = 备注, ${tableName} = 表格名称, ${modelName} = JavaBean类名 -->
            <property name="import-1" value="io.swagger.annotations.ApiModel"/>
            <property name="import-2" value="io.swagger.annotations.ApiModelProperty"/>
            <property name="import-3" value="com.kiun.functionary.base.general.ListBuild"/>
            <property name="import-4" value="com.kiun.functionary.base.general.ListBuildItem"/>
            <property name="anno-1" value="@ApiModel(description=${remarks})"/>
            <property name="anno-2" value="@ListBuild(value = ${modelName}, title = ${remarks})"/>
            <property name="criterionClass" value="com.kiun.functionary.base.Criterion"/>
            <property name="criteriaRoot" value="com.kiun.functionary.base.BaseCriteria"/>
            <property name="clientRoot-1" value="com.kiun.functionary.base.BaseExampleMapper"/>
            <property name="clientRootParam-1-1" value="${exampleType}" />
            <property name="clientRootParam-1-2" value="${recordType}"/>
        </plugin>

        <commentGenerator type="com.kiun.mybatis.auto.generate.DataBaseComment">
            <!--字段注解 内置字段 ${remarks} = 备注, ${tableName} = 表格名称, ${tableRemarks} = 表格备注 -->
            <property name="anno-1" value="@ApiModelProperty(${remarks})"/>
            <property name="anno-2" value="@ListBuildItem(title = ${remarks})"/>
        </commentGenerator>

        <!--数据库连接的信息：驱动类、连接地址、用户名、密码 127.0.0.1-->
        <jdbcConnection driverClass="com.mysql.cj.jdbc.Driver"
                        connectionURL="jdbc:mysql://124.70.141.199:3306/functionary?serverTimezone=GMT%2B8&amp;useSSL=false"
                        userId="root" password="!k9m7cco">
            <!--oracle 需要此属性才能打开注解-->
            <property name="remarksReporting" value="true" />
            <property name="nullCatalogMeansCurrent" value="true"/>
        </jdbcConnection>

        <!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
           NUMERIC 类型解析为java.math.BigDecimal -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!-- 指定javaBean生成的位置
            targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制；
            targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 /
         -->
        <javaModelGenerator targetPackage="com.kiun.functionary.dao.sys.entity" targetProject="src/main/kotlin">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false；如果多个数据库改为true分目录 -->
            <property name="enableSubPackages" value="false"/>
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
            <property name="rootClass" value="com.kiun.functionary.dao.IdRandom"/>
        </javaModelGenerator>

        <!--  指定mapper映射文件生成的位置 xml
           targetPackage、targetProject同javaModelGenerator中作用一样-->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!-- 指定mapper接口生成的位置 targetPackage、targetProject同javaModelGenerator中作用一样 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.kiun.functionary.dao.sys" targetProject="src/main/kotlin">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- 指定数据库表 或者视图.-->
        <!-- domainObjectName：生成的domain类的名字,当表名和domain类的名字有差异时一定要设置，如果不设置，直接使用表名作为domain类的名字；-->
        <!-- 可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；-->
<!--        <table tableName="v_role_menu_tree" domainObjectName="VRoleMenuTree" />-->
<!--        <table tableName="v_sys_dict_item_tree" domainObjectName="VSysDictItemTree" />-->
<!--        <table tableName="sys_dict" domainObjectName="SysDict" />-->
<!--        <table tableName="sys_dict_item" domainObjectName="SysDictItem">-->
<!--            <property name="useId" value="0"/>-->
<!--        </table>-->
<!--        <table tableName="sys_log" domainObjectName="SysLog" />-->
<!--        <table tableName="sys_login_log" domainObjectName="SysLoginLog" />-->
<!--        <table tableName="sys_menu" domainObjectName="SysMenu" />-->
<!--        <table tableName="sys_organ" domainObjectName="SysOrgan" />-->
<!--        <table tableName="sys_resource" domainObjectName="SysResource" />-->
<!--        <table tableName="sys_role" domainObjectName="SysRole" />-->

<!--        <table tableName="sys_role_menu" domainObjectName="SysRoleMenu">-->
<!--            <property name="rootClass" value="@null"/>-->
<!--        </table>-->
        <table tableName="sys_user" domainObjectName="SysUser">
            <property name="rootClass" value="org.springframework.security.core.userdetails.UserDetails"/>
        </table>
<!--        <table tableName="sys_user_role_ele" domainObjectName="SysUserRoleEle">-->
<!--            <property name="rootClass" value="@null"/>-->
<!--        </table>-->
    </context>
</generatorConfiguration>
